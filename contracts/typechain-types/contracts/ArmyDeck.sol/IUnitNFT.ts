/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DataTypes {
  export type ResourcesStruct = {
    food: BigNumberish;
    wood: BigNumberish;
    stone: BigNumberish;
    brass: BigNumberish;
    iron: BigNumberish;
    gold: BigNumberish;
  };

  export type ResourcesStructOutput = [
    food: bigint,
    wood: bigint,
    stone: bigint,
    brass: bigint,
    iron: bigint,
    gold: bigint
  ] & {
    food: bigint;
    wood: bigint;
    stone: bigint;
    brass: bigint;
    iron: bigint;
    gold: bigint;
  };
}

export declare namespace IUnitNFT {
  export type UnitStruct = {
    name: string;
    attack: BigNumberish;
    defense: BigNumberish;
    speed: BigNumberish;
    range: BigNumberish;
    abilities: string;
    upkeepCost: DataTypes.ResourcesStruct;
    isActive: boolean;
  };

  export type UnitStructOutput = [
    name: string,
    attack: bigint,
    defense: bigint,
    speed: bigint,
    range: bigint,
    abilities: string,
    upkeepCost: DataTypes.ResourcesStructOutput,
    isActive: boolean
  ] & {
    name: string;
    attack: bigint;
    defense: bigint;
    speed: bigint;
    range: bigint;
    abilities: string;
    upkeepCost: DataTypes.ResourcesStructOutput;
    isActive: boolean;
  };
}

export interface IUnitNFTInterface extends Interface {
  getFunction(nameOrSignature: "getUnitStats" | "ownerOf"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getUnitStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getUnitStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
}

export interface IUnitNFT extends BaseContract {
  connect(runner?: ContractRunner | null): IUnitNFT;
  waitForDeployment(): Promise<this>;

  interface: IUnitNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getUnitStats: TypedContractMethod<
    [tokenId: BigNumberish],
    [IUnitNFT.UnitStructOutput],
    "view"
  >;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getUnitStats"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [IUnitNFT.UnitStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  filters: {};
}
