/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ILeaderboard {
  export type NFTScoreStruct = { tokenId: BigNumberish; score: BigNumberish };

  export type NFTScoreStructOutput = [tokenId: bigint, score: bigint] & {
    tokenId: bigint;
    score: bigint;
  };
}

export interface RewardsDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "depositERC20"
      | "distributeRewards"
      | "erc20Token"
      | "getCurrentLeaderboard"
      | "getRewardWeights"
      | "getTotalRewardsAvailable"
      | "landNFTContract"
      | "leaderboardContract"
      | "maxRewardsRecipients"
      | "owner"
      | "renounceOwnership"
      | "rewardWeights"
      | "setMaxRewardsRecipients"
      | "setRewardWeights"
      | "totalWeight"
      | "transferOwnership"
      | "updateLandNFTContract"
      | "updateLeaderboardContract"
      | "withdrawERC20"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC20Deposited"
      | "ERC20Withdrawn"
      | "OwnershipTransferred"
      | "RewardWeightsUpdated"
      | "RewardsDistributed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLeaderboard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewardsAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "landNFTContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leaderboardContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRewardsRecipients",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWeights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRewardsRecipients",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardWeights",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLandNFTContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLeaderboardContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewardsAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "landNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderboardContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRewardsRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRewardsRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLandNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLeaderboardContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
}

export namespace ERC20DepositedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20WithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardWeightsUpdatedEvent {
  export type InputTuple = [weights: BigNumberish[]];
  export type OutputTuple = [weights: bigint[]];
  export interface OutputObject {
    weights: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [totalRewards: BigNumberish];
  export type OutputTuple = [totalRewards: bigint];
  export interface OutputObject {
    totalRewards: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardsDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): RewardsDistributor;
  waitForDeployment(): Promise<this>;

  interface: RewardsDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositERC20: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributeRewards: TypedContractMethod<[], [void], "nonpayable">;

  erc20Token: TypedContractMethod<[], [string], "view">;

  getCurrentLeaderboard: TypedContractMethod<
    [],
    [ILeaderboard.NFTScoreStructOutput[]],
    "view"
  >;

  getRewardWeights: TypedContractMethod<[], [bigint[]], "view">;

  getTotalRewardsAvailable: TypedContractMethod<[], [bigint], "view">;

  landNFTContract: TypedContractMethod<[], [string], "view">;

  leaderboardContract: TypedContractMethod<[], [string], "view">;

  maxRewardsRecipients: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardWeights: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  setMaxRewardsRecipients: TypedContractMethod<
    [_maxRecipients: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardWeights: TypedContractMethod<
    [_rewardWeights: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  totalWeight: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLandNFTContract: TypedContractMethod<
    [_newLandNFTAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLeaderboardContract: TypedContractMethod<
    [_newLeaderboardAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawERC20: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositERC20"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "erc20Token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentLeaderboard"
  ): TypedContractMethod<[], [ILeaderboard.NFTScoreStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRewardWeights"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalRewardsAvailable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "landNFTContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "leaderboardContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxRewardsRecipients"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardWeights"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setMaxRewardsRecipients"
  ): TypedContractMethod<[_maxRecipients: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardWeights"
  ): TypedContractMethod<
    [_rewardWeights: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalWeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLandNFTContract"
  ): TypedContractMethod<
    [_newLandNFTAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLeaderboardContract"
  ): TypedContractMethod<
    [_newLeaderboardAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawERC20"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ERC20Deposited"
  ): TypedContractEvent<
    ERC20DepositedEvent.InputTuple,
    ERC20DepositedEvent.OutputTuple,
    ERC20DepositedEvent.OutputObject
  >;
  getEvent(
    key: "ERC20Withdrawn"
  ): TypedContractEvent<
    ERC20WithdrawnEvent.InputTuple,
    ERC20WithdrawnEvent.OutputTuple,
    ERC20WithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardWeightsUpdated"
  ): TypedContractEvent<
    RewardWeightsUpdatedEvent.InputTuple,
    RewardWeightsUpdatedEvent.OutputTuple,
    RewardWeightsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;

  filters: {
    "ERC20Deposited(address,uint256)": TypedContractEvent<
      ERC20DepositedEvent.InputTuple,
      ERC20DepositedEvent.OutputTuple,
      ERC20DepositedEvent.OutputObject
    >;
    ERC20Deposited: TypedContractEvent<
      ERC20DepositedEvent.InputTuple,
      ERC20DepositedEvent.OutputTuple,
      ERC20DepositedEvent.OutputObject
    >;

    "ERC20Withdrawn(address,uint256)": TypedContractEvent<
      ERC20WithdrawnEvent.InputTuple,
      ERC20WithdrawnEvent.OutputTuple,
      ERC20WithdrawnEvent.OutputObject
    >;
    ERC20Withdrawn: TypedContractEvent<
      ERC20WithdrawnEvent.InputTuple,
      ERC20WithdrawnEvent.OutputTuple,
      ERC20WithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardWeightsUpdated(uint256[])": TypedContractEvent<
      RewardWeightsUpdatedEvent.InputTuple,
      RewardWeightsUpdatedEvent.OutputTuple,
      RewardWeightsUpdatedEvent.OutputObject
    >;
    RewardWeightsUpdated: TypedContractEvent<
      RewardWeightsUpdatedEvent.InputTuple,
      RewardWeightsUpdatedEvent.OutputTuple,
      RewardWeightsUpdatedEvent.OutputObject
    >;

    "RewardsDistributed(uint256)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
  };
}
