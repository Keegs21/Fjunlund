/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DataTypes {
  export type ResourcesStruct = {
    food: BigNumberish;
    wood: BigNumberish;
    stone: BigNumberish;
    brass: BigNumberish;
    iron: BigNumberish;
    gold: BigNumberish;
  };

  export type ResourcesStructOutput = [
    food: bigint,
    wood: bigint,
    stone: bigint,
    brass: bigint,
    iron: bigint,
    gold: bigint
  ] & {
    food: bigint;
    wood: bigint;
    stone: bigint;
    brass: bigint;
    iron: bigint;
    gold: bigint;
  };

  export type ResourceProductionStruct = {
    foodPerEpoch: BigNumberish;
    woodPerEpoch: BigNumberish;
    stonePerEpoch: BigNumberish;
    brassPerEpoch: BigNumberish;
    ironPerEpoch: BigNumberish;
    goldPerEpoch: BigNumberish;
  };

  export type ResourceProductionStructOutput = [
    foodPerEpoch: bigint,
    woodPerEpoch: bigint,
    stonePerEpoch: bigint,
    brassPerEpoch: bigint,
    ironPerEpoch: bigint,
    goldPerEpoch: bigint
  ] & {
    foodPerEpoch: bigint;
    woodPerEpoch: bigint;
    stonePerEpoch: bigint;
    brassPerEpoch: bigint;
    ironPerEpoch: bigint;
    goldPerEpoch: bigint;
  };

  export type BuildingStruct = {
    name: string;
    level: BigNumberish;
    isActive: boolean;
  };

  export type BuildingStructOutput = [
    name: string,
    level: bigint,
    isActive: boolean
  ] & { name: string; level: bigint; isActive: boolean };
}

export declare namespace BuildingManager {
  export type BuildingInfoStruct = {
    name: string;
    level: BigNumberish;
    baseCost: DataTypes.ResourcesStruct;
    upkeepCost: DataTypes.ResourcesStruct;
    productionBoost: BigNumberish;
    happinessBoost: BigNumberish;
    technologyBoost: BigNumberish;
    pietyBoost: BigNumberish;
    strengthBoost: BigNumberish;
    resourceProduction: DataTypes.ResourceProductionStruct;
    baseConstructionTime: BigNumberish;
    isAvailable: boolean;
  };

  export type BuildingInfoStructOutput = [
    name: string,
    level: bigint,
    baseCost: DataTypes.ResourcesStructOutput,
    upkeepCost: DataTypes.ResourcesStructOutput,
    productionBoost: bigint,
    happinessBoost: bigint,
    technologyBoost: bigint,
    pietyBoost: bigint,
    strengthBoost: bigint,
    resourceProduction: DataTypes.ResourceProductionStructOutput,
    baseConstructionTime: bigint,
    isAvailable: boolean
  ] & {
    name: string;
    level: bigint;
    baseCost: DataTypes.ResourcesStructOutput;
    upkeepCost: DataTypes.ResourcesStructOutput;
    productionBoost: bigint;
    happinessBoost: bigint;
    technologyBoost: bigint;
    pietyBoost: bigint;
    strengthBoost: bigint;
    resourceProduction: DataTypes.ResourceProductionStructOutput;
    baseConstructionTime: bigint;
    isAvailable: boolean;
  };
}

export interface BuildingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "availableBuildings"
      | "calculateTotalResourceProduction"
      | "completeBuildingConstruction"
      | "getBuildingInfo"
      | "landNFT"
      | "setLandNFT"
      | "startBuildingConstruction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "availableBuildings",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalResourceProduction",
    values: [DataTypes.BuildingStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeBuildingConstruction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuildingInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "landNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setLandNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startBuildingConstruction",
    values: [string, BigNumberish, DataTypes.ResourcesStruct, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableBuildings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalResourceProduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeBuildingConstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuildingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "landNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLandNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startBuildingConstruction",
    data: BytesLike
  ): Result;
}

export interface BuildingManager extends BaseContract {
  connect(runner?: ContractRunner | null): BuildingManager;
  waitForDeployment(): Promise<this>;

  interface: BuildingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  availableBuildings: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [
        string,
        bigint,
        DataTypes.ResourcesStructOutput,
        DataTypes.ResourcesStructOutput,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        DataTypes.ResourceProductionStructOutput,
        bigint,
        boolean
      ] & {
        name: string;
        level: bigint;
        baseCost: DataTypes.ResourcesStructOutput;
        upkeepCost: DataTypes.ResourcesStructOutput;
        productionBoost: bigint;
        happinessBoost: bigint;
        technologyBoost: bigint;
        pietyBoost: bigint;
        strengthBoost: bigint;
        resourceProduction: DataTypes.ResourceProductionStructOutput;
        baseConstructionTime: bigint;
        isAvailable: boolean;
      }
    ],
    "view"
  >;

  calculateTotalResourceProduction: TypedContractMethod<
    [buildings: DataTypes.BuildingStruct[], epochsElapsed: BigNumberish],
    [DataTypes.ResourcesStructOutput],
    "view"
  >;

  completeBuildingConstruction: TypedContractMethod<
    [buildingName: string, level: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        productionBoost: bigint;
        happinessBoost: bigint;
        strengthBoost: bigint;
      }
    ],
    "view"
  >;

  getBuildingInfo: TypedContractMethod<
    [name: string, level: BigNumberish],
    [BuildingManager.BuildingInfoStructOutput],
    "view"
  >;

  landNFT: TypedContractMethod<[], [string], "view">;

  setLandNFT: TypedContractMethod<
    [_landNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  startBuildingConstruction: TypedContractMethod<
    [
      buildingName: string,
      level: BigNumberish,
      currentResources: DataTypes.ResourcesStruct,
      production: BigNumberish
    ],
    [
      [DataTypes.ResourcesStructOutput, bigint] & {
        updatedResources: DataTypes.ResourcesStructOutput;
        completionTime: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "availableBuildings"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [
        string,
        bigint,
        DataTypes.ResourcesStructOutput,
        DataTypes.ResourcesStructOutput,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        DataTypes.ResourceProductionStructOutput,
        bigint,
        boolean
      ] & {
        name: string;
        level: bigint;
        baseCost: DataTypes.ResourcesStructOutput;
        upkeepCost: DataTypes.ResourcesStructOutput;
        productionBoost: bigint;
        happinessBoost: bigint;
        technologyBoost: bigint;
        pietyBoost: bigint;
        strengthBoost: bigint;
        resourceProduction: DataTypes.ResourceProductionStructOutput;
        baseConstructionTime: bigint;
        isAvailable: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTotalResourceProduction"
  ): TypedContractMethod<
    [buildings: DataTypes.BuildingStruct[], epochsElapsed: BigNumberish],
    [DataTypes.ResourcesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeBuildingConstruction"
  ): TypedContractMethod<
    [buildingName: string, level: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        productionBoost: bigint;
        happinessBoost: bigint;
        strengthBoost: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBuildingInfo"
  ): TypedContractMethod<
    [name: string, level: BigNumberish],
    [BuildingManager.BuildingInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "landNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setLandNFT"
  ): TypedContractMethod<[_landNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startBuildingConstruction"
  ): TypedContractMethod<
    [
      buildingName: string,
      level: BigNumberish,
      currentResources: DataTypes.ResourcesStruct,
      production: BigNumberish
    ],
    [
      [DataTypes.ResourcesStructOutput, bigint] & {
        updatedResources: DataTypes.ResourcesStructOutput;
        completionTime: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
