/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DataTypes {
  export type CoordinatesStruct = { x: BigNumberish; y: BigNumberish };

  export type CoordinatesStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };
}

export interface MapContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GRID_SIZE"
      | "MAX_COORDINATE"
      | "MAX_COORDINATES"
      | "MIN_COORDINATE"
      | "assignCoordinate"
      | "assignRandomCoordinate"
      | "getAvailableAdjacentCoordinates"
      | "getCoordinateTokenId"
      | "getTokenCoordinates"
      | "isCoordinateOccupied"
      | "landNFTAddress"
      | "setLandNFTAddress"
      | "totalAssignedCoordinates"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "GRID_SIZE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_COORDINATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_COORDINATES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_COORDINATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignCoordinate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assignRandomCoordinate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAdjacentCoordinates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoordinateTokenId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCoordinates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCoordinateOccupied",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "landNFTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLandNFTAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssignedCoordinates",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "GRID_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_COORDINATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_COORDINATES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_COORDINATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignCoordinate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignRandomCoordinate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAdjacentCoordinates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoordinateTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCoordinates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCoordinateOccupied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "landNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLandNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssignedCoordinates",
    data: BytesLike
  ): Result;
}

export interface MapContract extends BaseContract {
  connect(runner?: ContractRunner | null): MapContract;
  waitForDeployment(): Promise<this>;

  interface: MapContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GRID_SIZE: TypedContractMethod<[], [bigint], "view">;

  MAX_COORDINATE: TypedContractMethod<[], [bigint], "view">;

  MAX_COORDINATES: TypedContractMethod<[], [bigint], "view">;

  MIN_COORDINATE: TypedContractMethod<[], [bigint], "view">;

  assignCoordinate: TypedContractMethod<
    [tokenId: BigNumberish, x: BigNumberish, y: BigNumberish],
    [void],
    "nonpayable"
  >;

  assignRandomCoordinate: TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "nonpayable"
  >;

  getAvailableAdjacentCoordinates: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [DataTypes.CoordinatesStructOutput[]],
    "view"
  >;

  getCoordinateTokenId: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [bigint],
    "view"
  >;

  getTokenCoordinates: TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  isCoordinateOccupied: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [boolean],
    "view"
  >;

  landNFTAddress: TypedContractMethod<[], [string], "view">;

  setLandNFTAddress: TypedContractMethod<
    [_landNFTAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  totalAssignedCoordinates: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GRID_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_COORDINATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_COORDINATES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_COORDINATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assignCoordinate"
  ): TypedContractMethod<
    [tokenId: BigNumberish, x: BigNumberish, y: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assignRandomCoordinate"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableAdjacentCoordinates"
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [DataTypes.CoordinatesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCoordinateTokenId"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenCoordinates"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCoordinateOccupied"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "landNFTAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setLandNFTAddress"
  ): TypedContractMethod<[_landNFTAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalAssignedCoordinates"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
