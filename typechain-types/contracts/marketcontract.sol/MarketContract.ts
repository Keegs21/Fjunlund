/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MarketContract {
  export type ResourcePriceStruct = {
    foodPrice: BigNumberish;
    woodPrice: BigNumberish;
    stonePrice: BigNumberish;
    brassPrice: BigNumberish;
    ironPrice: BigNumberish;
    goldPrice: BigNumberish;
  };

  export type ResourcePriceStructOutput = [
    foodPrice: bigint,
    woodPrice: bigint,
    stonePrice: bigint,
    brassPrice: bigint,
    ironPrice: bigint,
    goldPrice: bigint
  ] & {
    foodPrice: bigint;
    woodPrice: bigint;
    stonePrice: bigint;
    brassPrice: bigint;
    ironPrice: bigint;
    goldPrice: bigint;
  };
}

export declare namespace DataTypes {
  export type ResourcesStruct = {
    food: BigNumberish;
    wood: BigNumberish;
    stone: BigNumberish;
    brass: BigNumberish;
    iron: BigNumberish;
    gold: BigNumberish;
  };

  export type ResourcesStructOutput = [
    food: bigint,
    wood: bigint,
    stone: bigint,
    brass: bigint,
    iron: bigint,
    gold: bigint
  ] & {
    food: bigint;
    wood: bigint;
    stone: bigint;
    brass: bigint;
    iron: bigint;
    gold: bigint;
  };
}

export interface MarketContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyResources"
      | "erc20Token"
      | "getResourcePrices"
      | "landNFT"
      | "owner"
      | "renounceOwnership"
      | "resourcePrice"
      | "setResourcePrices"
      | "transferOwnership"
      | "withdrawAllERC20"
      | "withdrawERC20"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC20Withdrawn"
      | "OwnershipTransferred"
      | "ResourcePricesUpdated"
      | "ResourcesPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyResources",
    values: [BigNumberish, DataTypes.ResourcesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResourcePrices",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "landNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resourcePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setResourcePrices",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResourcePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "landNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resourcePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResourcePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
}

export namespace ERC20WithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourcePricesUpdatedEvent {
  export type InputTuple = [newPrices: MarketContract.ResourcePriceStruct];
  export type OutputTuple = [
    newPrices: MarketContract.ResourcePriceStructOutput
  ];
  export interface OutputObject {
    newPrices: MarketContract.ResourcePriceStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourcesPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    tokenId: BigNumberish,
    resources: DataTypes.ResourcesStruct,
    totalCost: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    tokenId: bigint,
    resources: DataTypes.ResourcesStructOutput,
    totalCost: bigint
  ];
  export interface OutputObject {
    buyer: string;
    tokenId: bigint;
    resources: DataTypes.ResourcesStructOutput;
    totalCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketContract extends BaseContract {
  connect(runner?: ContractRunner | null): MarketContract;
  waitForDeployment(): Promise<this>;

  interface: MarketContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyResources: TypedContractMethod<
    [tokenId: BigNumberish, desiredResources: DataTypes.ResourcesStruct],
    [void],
    "nonpayable"
  >;

  erc20Token: TypedContractMethod<[], [string], "view">;

  getResourcePrices: TypedContractMethod<
    [],
    [MarketContract.ResourcePriceStructOutput],
    "view"
  >;

  landNFT: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resourcePrice: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        foodPrice: bigint;
        woodPrice: bigint;
        stonePrice: bigint;
        brassPrice: bigint;
        ironPrice: bigint;
        goldPrice: bigint;
      }
    ],
    "view"
  >;

  setResourcePrices: TypedContractMethod<
    [
      _foodPrice: BigNumberish,
      _woodPrice: BigNumberish,
      _stonePrice: BigNumberish,
      _brassPrice: BigNumberish,
      _ironPrice: BigNumberish,
      _goldPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawAllERC20: TypedContractMethod<[], [void], "nonpayable">;

  withdrawERC20: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyResources"
  ): TypedContractMethod<
    [tokenId: BigNumberish, desiredResources: DataTypes.ResourcesStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc20Token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getResourcePrices"
  ): TypedContractMethod<
    [],
    [MarketContract.ResourcePriceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "landNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resourcePrice"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        foodPrice: bigint;
        woodPrice: bigint;
        stonePrice: bigint;
        brassPrice: bigint;
        ironPrice: bigint;
        goldPrice: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setResourcePrices"
  ): TypedContractMethod<
    [
      _foodPrice: BigNumberish,
      _woodPrice: BigNumberish,
      _stonePrice: BigNumberish,
      _brassPrice: BigNumberish,
      _ironPrice: BigNumberish,
      _goldPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAllERC20"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawERC20"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ERC20Withdrawn"
  ): TypedContractEvent<
    ERC20WithdrawnEvent.InputTuple,
    ERC20WithdrawnEvent.OutputTuple,
    ERC20WithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ResourcePricesUpdated"
  ): TypedContractEvent<
    ResourcePricesUpdatedEvent.InputTuple,
    ResourcePricesUpdatedEvent.OutputTuple,
    ResourcePricesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ResourcesPurchased"
  ): TypedContractEvent<
    ResourcesPurchasedEvent.InputTuple,
    ResourcesPurchasedEvent.OutputTuple,
    ResourcesPurchasedEvent.OutputObject
  >;

  filters: {
    "ERC20Withdrawn(address,uint256)": TypedContractEvent<
      ERC20WithdrawnEvent.InputTuple,
      ERC20WithdrawnEvent.OutputTuple,
      ERC20WithdrawnEvent.OutputObject
    >;
    ERC20Withdrawn: TypedContractEvent<
      ERC20WithdrawnEvent.InputTuple,
      ERC20WithdrawnEvent.OutputTuple,
      ERC20WithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ResourcePricesUpdated(tuple)": TypedContractEvent<
      ResourcePricesUpdatedEvent.InputTuple,
      ResourcePricesUpdatedEvent.OutputTuple,
      ResourcePricesUpdatedEvent.OutputObject
    >;
    ResourcePricesUpdated: TypedContractEvent<
      ResourcePricesUpdatedEvent.InputTuple,
      ResourcePricesUpdatedEvent.OutputTuple,
      ResourcePricesUpdatedEvent.OutputObject
    >;

    "ResourcesPurchased(address,uint256,tuple,uint256)": TypedContractEvent<
      ResourcesPurchasedEvent.InputTuple,
      ResourcesPurchasedEvent.OutputTuple,
      ResourcesPurchasedEvent.OutputObject
    >;
    ResourcesPurchased: TypedContractEvent<
      ResourcesPurchasedEvent.InputTuple,
      ResourcesPurchasedEvent.OutputTuple,
      ResourcesPurchasedEvent.OutputObject
    >;
  };
}
