/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DataTypes {
  export type BuildingStruct = {
    name: string;
    level: BigNumberish;
    isActive: boolean;
  };

  export type BuildingStructOutput = [
    name: string,
    level: bigint,
    isActive: boolean
  ] & { name: string; level: bigint; isActive: boolean };

  export type BuildingUnderConstructionStruct = {
    name: string;
    level: BigNumberish;
    completionTime: BigNumberish;
  };

  export type BuildingUnderConstructionStructOutput = [
    name: string,
    level: bigint,
    completionTime: bigint
  ] & { name: string; level: bigint; completionTime: bigint };

  export type ResourcesStruct = {
    food: BigNumberish;
    wood: BigNumberish;
    stone: BigNumberish;
    brass: BigNumberish;
    iron: BigNumberish;
    gold: BigNumberish;
  };

  export type ResourcesStructOutput = [
    food: bigint,
    wood: bigint,
    stone: bigint,
    brass: bigint,
    iron: bigint,
    gold: bigint
  ] & {
    food: bigint;
    wood: bigint;
    stone: bigint;
    brass: bigint;
    iron: bigint;
    gold: bigint;
  };

  export type LandStatsStruct = {
    population: BigNumberish;
    production: BigNumberish;
    happiness: BigNumberish;
    technology: BigNumberish;
    piety: BigNumberish;
    strength: BigNumberish;
    buildings: DataTypes.BuildingStruct[];
    constructions: DataTypes.BuildingUnderConstructionStruct[];
    resources: DataTypes.ResourcesStruct;
    lastResourceUpdate: BigNumberish;
  };

  export type LandStatsStructOutput = [
    population: bigint,
    production: bigint,
    happiness: bigint,
    technology: bigint,
    piety: bigint,
    strength: bigint,
    buildings: DataTypes.BuildingStructOutput[],
    constructions: DataTypes.BuildingUnderConstructionStructOutput[],
    resources: DataTypes.ResourcesStructOutput,
    lastResourceUpdate: bigint
  ] & {
    population: bigint;
    production: bigint;
    happiness: bigint;
    technology: bigint;
    piety: bigint;
    strength: bigint;
    buildings: DataTypes.BuildingStructOutput[];
    constructions: DataTypes.BuildingUnderConstructionStructOutput[];
    resources: DataTypes.ResourcesStructOutput;
    lastResourceUpdate: bigint;
  };
}

export interface LandNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "buildingManager"
      | "completeBuildingConstruction"
      | "epochDuration"
      | "getApproved"
      | "getLandCoordinates"
      | "getLandStats"
      | "increaseMaxSupply"
      | "isApprovedForAll"
      | "mapContract"
      | "maxSupply"
      | "mint"
      | "mintPrice"
      | "name"
      | "nextTokenId"
      | "owner"
      | "ownerOf"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBuildingManager"
      | "setMapContract"
      | "setMintPrice"
      | "startBuildingConstruction"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "updateEpoch"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BuildingConstructionCompleted"
      | "BuildingConstructionStarted"
      | "EpochUpdated"
      | "Minted"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buildingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeBuildingConstruction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLandCoordinates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLandStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mapContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuildingManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMapContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startBuildingConstruction",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buildingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeBuildingConstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLandCoordinates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLandStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuildingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startBuildingConstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuildingConstructionCompletedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    buildingName: string,
    level: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    buildingName: string,
    level: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    buildingName: string;
    level: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuildingConstructionStartedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    buildingName: string,
    level: BigNumberish,
    completionTime: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    buildingName: string,
    level: bigint,
    completionTime: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    buildingName: string;
    level: bigint;
    completionTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    stats: DataTypes.LandStatsStruct
  ];
  export type OutputTuple = [
    tokenId: bigint,
    stats: DataTypes.LandStatsStructOutput
  ];
  export interface OutputObject {
    tokenId: bigint;
    stats: DataTypes.LandStatsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedEvent {
  export type InputTuple = [
    owner: AddressLike,
    tokenId: BigNumberish,
    x: BigNumberish,
    y: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tokenId: bigint,
    x: bigint,
    y: bigint
  ];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
    x: bigint;
    y: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LandNFT extends BaseContract {
  [x: string]: any;
  connect(runner?: ContractRunner | null): LandNFT;
  waitForDeployment(): Promise<this>;

  interface: LandNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  buildingManager: TypedContractMethod<[], [string], "view">;

  completeBuildingConstruction: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  epochDuration: TypedContractMethod<[], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getLandCoordinates: TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  getLandStats: TypedContractMethod<
    [tokenId: BigNumberish],
    [DataTypes.LandStatsStructOutput],
    "view"
  >;

  increaseMaxSupply: TypedContractMethod<
    [newMaxSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  mapContract: TypedContractMethod<[], [string], "view">;

  maxSupply: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [
      option: BigNumberish,
      existingTokenId: BigNumberish,
      x: BigNumberish,
      y: BigNumberish
    ],
    [void],
    "payable"
  >;

  mintPrice: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nextTokenId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBuildingManager: TypedContractMethod<
    [_buildingManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setMapContract: TypedContractMethod<
    [_mapContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setMintPrice: TypedContractMethod<
    [newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  startBuildingConstruction: TypedContractMethod<
    [tokenId: BigNumberish, buildingName: string, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateEpoch: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buildingManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "completeBuildingConstruction"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "epochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLandCoordinates"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLandStats"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [DataTypes.LandStatsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseMaxSupply"
  ): TypedContractMethod<[newMaxSupply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mapContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      option: BigNumberish,
      existingTokenId: BigNumberish,
      x: BigNumberish,
      y: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBuildingManager"
  ): TypedContractMethod<[_buildingManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMapContract"
  ): TypedContractMethod<[_mapContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMintPrice"
  ): TypedContractMethod<[newPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startBuildingConstruction"
  ): TypedContractMethod<
    [tokenId: BigNumberish, buildingName: string, level: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEpoch"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BuildingConstructionCompleted"
  ): TypedContractEvent<
    BuildingConstructionCompletedEvent.InputTuple,
    BuildingConstructionCompletedEvent.OutputTuple,
    BuildingConstructionCompletedEvent.OutputObject
  >;
  getEvent(
    key: "BuildingConstructionStarted"
  ): TypedContractEvent<
    BuildingConstructionStartedEvent.InputTuple,
    BuildingConstructionStartedEvent.OutputTuple,
    BuildingConstructionStartedEvent.OutputObject
  >;
  getEvent(
    key: "EpochUpdated"
  ): TypedContractEvent<
    EpochUpdatedEvent.InputTuple,
    EpochUpdatedEvent.OutputTuple,
    EpochUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Minted"
  ): TypedContractEvent<
    MintedEvent.InputTuple,
    MintedEvent.OutputTuple,
    MintedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BuildingConstructionCompleted(uint256,string,uint256)": TypedContractEvent<
      BuildingConstructionCompletedEvent.InputTuple,
      BuildingConstructionCompletedEvent.OutputTuple,
      BuildingConstructionCompletedEvent.OutputObject
    >;
    BuildingConstructionCompleted: TypedContractEvent<
      BuildingConstructionCompletedEvent.InputTuple,
      BuildingConstructionCompletedEvent.OutputTuple,
      BuildingConstructionCompletedEvent.OutputObject
    >;

    "BuildingConstructionStarted(uint256,string,uint256,uint256)": TypedContractEvent<
      BuildingConstructionStartedEvent.InputTuple,
      BuildingConstructionStartedEvent.OutputTuple,
      BuildingConstructionStartedEvent.OutputObject
    >;
    BuildingConstructionStarted: TypedContractEvent<
      BuildingConstructionStartedEvent.InputTuple,
      BuildingConstructionStartedEvent.OutputTuple,
      BuildingConstructionStartedEvent.OutputObject
    >;

    "EpochUpdated(uint256,tuple)": TypedContractEvent<
      EpochUpdatedEvent.InputTuple,
      EpochUpdatedEvent.OutputTuple,
      EpochUpdatedEvent.OutputObject
    >;
    EpochUpdated: TypedContractEvent<
      EpochUpdatedEvent.InputTuple,
      EpochUpdatedEvent.OutputTuple,
      EpochUpdatedEvent.OutputObject
    >;

    "Minted(address,uint256,int256,int256)": TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;
    Minted: TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
