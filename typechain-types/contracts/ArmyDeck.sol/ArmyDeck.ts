/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ArmyDeckInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_UNITS_IN_DECK"
      | "addUnitsToDeck"
      | "getUserDeck"
      | "getUserDeckUnitDetails"
      | "owner"
      | "removeUnitsFromDeck"
      | "renounceOwnership"
      | "transferOwnership"
      | "unitNFTContract"
      | "userDecks"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "UnitsAddedToDeck"
      | "UnitsRemovedFromDeck"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_UNITS_IN_DECK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addUnitsToDeck",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDeck",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDeckUnitDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeUnitsFromDeck",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unitNFTContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userDecks",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_UNITS_IN_DECK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUnitsToDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDeckUnitDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeUnitsFromDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unitNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userDecks", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnitsAddedToDeckEvent {
  export type InputTuple = [user: AddressLike, unitIds: BigNumberish[]];
  export type OutputTuple = [user: string, unitIds: bigint[]];
  export interface OutputObject {
    user: string;
    unitIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnitsRemovedFromDeckEvent {
  export type InputTuple = [user: AddressLike, unitIds: BigNumberish[]];
  export type OutputTuple = [user: string, unitIds: bigint[]];
  export interface OutputObject {
    user: string;
    unitIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArmyDeck extends BaseContract {
  connect(runner?: ContractRunner | null): ArmyDeck;
  waitForDeployment(): Promise<this>;

  interface: ArmyDeckInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_UNITS_IN_DECK: TypedContractMethod<[], [bigint], "view">;

  addUnitsToDeck: TypedContractMethod<
    [_unitIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getUserDeck: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  getUserDeckUnitDetails: TypedContractMethod<
    [_user: AddressLike],
    [
      [
        string[],
        bigint[],
        bigint[],
        bigint[],
        bigint[],
        string[],
        boolean[]
      ] & {
        names: string[];
        attacks: bigint[];
        defenses: bigint[];
        speeds: bigint[];
        ranges: bigint[];
        abilitiesList: string[];
        isActives: boolean[];
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeUnitsFromDeck: TypedContractMethod<
    [_unitIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unitNFTContract: TypedContractMethod<[], [string], "view">;

  userDecks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_UNITS_IN_DECK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addUnitsToDeck"
  ): TypedContractMethod<[_unitIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getUserDeck"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserDeckUnitDetails"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [
        string[],
        bigint[],
        bigint[],
        bigint[],
        bigint[],
        string[],
        boolean[]
      ] & {
        names: string[];
        attacks: bigint[];
        defenses: bigint[];
        speeds: bigint[];
        ranges: bigint[];
        abilitiesList: string[];
        isActives: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeUnitsFromDeck"
  ): TypedContractMethod<[_unitIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unitNFTContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userDecks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UnitsAddedToDeck"
  ): TypedContractEvent<
    UnitsAddedToDeckEvent.InputTuple,
    UnitsAddedToDeckEvent.OutputTuple,
    UnitsAddedToDeckEvent.OutputObject
  >;
  getEvent(
    key: "UnitsRemovedFromDeck"
  ): TypedContractEvent<
    UnitsRemovedFromDeckEvent.InputTuple,
    UnitsRemovedFromDeckEvent.OutputTuple,
    UnitsRemovedFromDeckEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UnitsAddedToDeck(address,uint256[])": TypedContractEvent<
      UnitsAddedToDeckEvent.InputTuple,
      UnitsAddedToDeckEvent.OutputTuple,
      UnitsAddedToDeckEvent.OutputObject
    >;
    UnitsAddedToDeck: TypedContractEvent<
      UnitsAddedToDeckEvent.InputTuple,
      UnitsAddedToDeckEvent.OutputTuple,
      UnitsAddedToDeckEvent.OutputObject
    >;

    "UnitsRemovedFromDeck(address,uint256[])": TypedContractEvent<
      UnitsRemovedFromDeckEvent.InputTuple,
      UnitsRemovedFromDeckEvent.OutputTuple,
      UnitsRemovedFromDeckEvent.OutputObject
    >;
    UnitsRemovedFromDeck: TypedContractEvent<
      UnitsRemovedFromDeckEvent.InputTuple,
      UnitsRemovedFromDeckEvent.OutputTuple,
      UnitsRemovedFromDeckEvent.OutputObject
    >;
  };
}
